{"version":3,"sources":["Input.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Input","inputProps","className","label","onChange","name","type","ref","registerValidation","errors","errorMesssage","isElementInTheList","element","list","includes","trim","toLowerCase","Form","useForm","register","triggerValidation","useState","colours","setColours","people","setPeople","animals","setAnimals","useEffect","fetch","process","then","response","json","data","validation","a","min","max","validate","colour","person","animal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAEaA,EAAQ,SAACC,GAClB,OACI,yBAAKC,UAAU,sBACX,2BAAOA,UAAU,aACZD,EAAWE,OAEhB,2BAAOC,SAAUH,EAAWG,SAAUC,KAAMJ,EAAWI,KAAMH,UAAU,YAAYI,KAAML,EAAWK,KAAMC,IAAKN,EAAWO,qBAC1H,0BAAMN,UAAS,2BAAuBD,EAAWQ,OAAOR,EAAWI,MAAQ,0BAA4B,KAClGJ,EAAWS,iBCNtBC,EAAqB,SAACC,EAASC,GACjC,OAAID,GAIGC,EAAKC,SAASF,EAAQG,OAAOC,gBAG3BC,EAAO,WAAO,IAAD,EACyBC,cAAvCC,EADc,EACdA,SAAUV,EADI,EACJA,OAAQW,EADJ,EACIA,kBADJ,EAEQC,mBAAS,IAFjB,mBAEfC,EAFe,KAENC,EAFM,OAGMF,mBAAS,IAHf,mBAGfG,EAHe,KAGPC,EAHO,OAIQJ,mBAAS,IAJjB,mBAIfK,EAJe,KAINC,EAJM,KAkBtBC,qBAAU,WACNC,MAAM,GAAD,OAAIC,6BAAJ,eAAwCC,MAAK,SAACC,GAC/CA,EAASC,OAAOF,MAAK,SAACG,GAClBX,EAAWW,EAAKZ,SAChBG,EAAUS,EAAKV,QACfG,EAAWO,EAAKR,iBAGzB,IAEH,IAAMS,EAAU,uCAAG,sBAAAC,EAAA,sEACThB,IADS,2CAAH,qDAIhB,OACI,8BACI,kBAAC,EAAD,CACId,KAAK,SACLH,MAAM,mBACNC,SAAU+B,EACV9B,KAAK,UACLG,mBAAoBW,EAAS,CAAEkB,IAAK,EAAGC,IAAK,KAC5C7B,OAAQA,EACRC,cAAc,kCAGlB,kBAAC,EAAD,CACIJ,KAAK,OACLH,MAAM,mBACNC,SAAU+B,EACV9B,KAAK,UACLG,mBAAoBW,EAAS,CAAEoB,SA3CpB,SAACC,GACpB,OAAO7B,EAAmB6B,EAAQlB,MA2C1Bb,OAAQA,EACRC,cAAc,uCAGlB,kBAAC,EAAD,CACIJ,KAAK,OACLH,MAAM,4BACNC,SAAU+B,EACV9B,KAAK,SACLG,mBAAoBW,EAAS,CAAEoB,SAjDpB,SAACE,GACpB,OAAO9B,EAAmB8B,EAAQjB,MAiD1Bf,OAAQA,EACRC,cAAc,uBAGlB,kBAAC,EAAD,CACIJ,KAAK,OACLH,MAAM,4BACNC,SAAU+B,EACV9B,KAAK,SACLG,mBAAoBW,EAAS,CAAEoB,SAvDnB,SAACG,GACrB,OAAO/B,EAAmB+B,EAAQhB,MAuD1BjB,OAAQA,EACRC,cAAc,0C,YC7DfiC,MAhBf,WACI,OACI,yBAAKzC,UAAU,OACX,4BAAQA,UAAU,cACd,6DAKJ,yBAAKA,UAAU,sBACX,kBAAC,EAAD,SCJI0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a095a057.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Input = (inputProps) => {\n    return (\n        <div className='App-inputContainer'>\n            <label className='App-label'>\n                {inputProps.label}\n            </label>\n            <input onChange={inputProps.onChange} name={inputProps.name} className='App-input' type={inputProps.type} ref={inputProps.registerValidation}/>\n            <span className={`App-errorMessage ${(inputProps.errors[inputProps.name] ? \"App-errorMessageVisible\" : '')}`}>\n                {inputProps.errorMesssage}\n            </span>\n        </div>\n)}","import {useForm} from \"react-hook-form\";\nimport React, {useEffect, useState} from \"react\";\nimport {Input} from \"./Input\";\n\nconst isElementInTheList = (element, list) => {\n    if(!element) {\n        return true\n    }\n\n    return list.includes(element.trim().toLowerCase());\n};\n\nexport const Form = () => {\n    const { register, errors, triggerValidation} = useForm();\n    const [colours, setColours] = useState([]);\n    const [people, setPeople] = useState([]);\n    const [animals, setAnimals] = useState([]);\n\n    const validateColour = (colour) => {\n        return isElementInTheList(colour, colours);\n    };\n\n    const validatePeople = (person) => {\n        return isElementInTheList(person, people);\n    };\n\n    const validateAnimals = (animal) => {\n        return isElementInTheList(animal, animals);\n    };\n\n    useEffect(() => {\n        fetch(`${process.env.PUBLIC_URL}/data.json`).then((response) => {\n            response.json().then((data) => {\n                setColours(data.colours);\n                setPeople(data.people);\n                setAnimals(data.animals);\n            })\n        })\n    }, []);\n\n    const validation = async () => {\n        await triggerValidation();\n    };\n\n    return (\n        <form>\n            <Input\n                type='number'\n                label='Scegli un numero'\n                onChange={validation}\n                name='numbers'\n                registerValidation={register({ min: 1, max: 99 })}\n                errors={errors}\n                errorMesssage='Il Mantu sa contare da 1 a 99'>\n            </Input>\n\n            <Input\n                type='text'\n                label='Scegli un colore'\n                onChange={validation}\n                name='colours'\n                registerValidation={register({ validate: validateColour })}\n                errors={errors}\n                errorMesssage='Il Mantu non conosce questo colore'>\n            </Input>\n\n            <Input\n                type='text'\n                label='Scegli un nome di persona'\n                onChange={validation}\n                name='person'\n                registerValidation={register({ validate: validatePeople })}\n                errors={errors}\n                errorMesssage='E questo chi Ã©?'>\n            </Input>\n\n            <Input\n                type='text'\n                label='Scegli un nome di animale'\n                onChange={validation}\n                name='animal'\n                registerValidation={register({ validate: validateAnimals })}\n                errors={errors}\n                errorMesssage='Il Mantu non conosce questo animale'>\n            </Input>\n        </form>\n    );\n};","import React from 'react';\nimport { Form }  from './Form';\nimport './App.css';\nimport './reset.css';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>\n                    Generatore di frasi del Mantu\n                </p>\n            </header>\n\n            <div className='App-inputContainer'>\n                <Form/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}